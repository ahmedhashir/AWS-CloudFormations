AWSTemplateFormatVersion: 2010-09-09

Description: >
              This CloudFormation template will create a RedShift Cluster.

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Cluster Configuration
        Parameters:
          - ClusterName
          - ClusterLaunchType
          - ReleaseLabel
          - KeyPair
          - Applications
          - RunTestStep
      -
        Label:
          default: "Node configuration"
        Parameters:
          - InstanceType
          - CoreNodes
          - TaskNodes
          - BidPriceAsPercentageOfOnDemandPrice
      -
        Label:
          default: Network
        Parameters:
          - NetworkStack
          - KMSStack
          - S3Stack

    ParameterLabels:
      NetworkStack:
        default: "Name of network stack"
      ClusterName:
        default: "EMR cluster name"
      ReleaseLabel:
        default: "EMR Release"
      KeyPair:
        default: "Key Pair"
      CoreNodes:
        default: "No. of core Nodes"
      TaskNodes:
        default: "No. of task Nodes"
      BidPriceAsPercentageOfOnDemandPrice:
        default: "Bid price %"
      InstanceType:
        default: "Instance Type"

Parameters:

  ClusterName:
    Description: "Name of the EMR cluster"
    Type: String
    Default: "Hash-EMR-Cluster"

  ClusterLaunchType:
    Description: Public Subnet or Private Subnet
    Type: String
    Default: Public
    AllowedValues:
      - "Public"
      - "Private"

  ReleaseLabel:
    Description: "EMR Release version"
    Type: String
    Default: "emr-5.27.0"

  Applications:
    Description: "Applications"
    Type: CommaDelimitedList
    Default: "Presto, Livy"

  NetworkStack:
    Description: Name of Network Stack that will contain a Public Subnet
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: HashNetworkStack

  KeyPair:
    Description: "Key Pair for EC2 instances"
    Type: AWS::EC2::KeyPair::KeyName
  CoreNodes:
    Description: "Number of Core nodes"
    Type: Number
    Default: 2

  TaskNodes:
    Description: "Number of task nodes"
    Type: Number
    Default: 0

  InstanceType:
    Description: "Instance Type of Core Node"
    Type: String
    Default: "m5.xlarge"

  BidPriceAsPercentageOfOnDemandPrice:
    Description: "The bid price, as a percentage of the On-Demand price"
    Type: Number
    Default: 50

  KMSStack:
    Description: Name of KMS Stack that exports a KMS key
    Type: String
    Default: HashKMSStack

  S3Stack:
    Description: Name of S3 Stack
    Type: String
    Default: HashS3Stack

  RunTestStep:
    Description: "Run a test upon cluster statup"
    Type: String
    Default: "Yes"
    AllowedValues: [ "Yes", "No" ]

Conditions:

  UseSpotInstance: !Not [ !Equals [ !Ref BidPriceAsPercentageOfOnDemandPrice, "0" ] ]
  CreateTaskNodes: !Not [ !Equals [ !Ref TaskNodes, "0" ] ]
  PublicCluster: !Equals [ !Ref ClusterLaunchType, "Public" ]
  RunTestStep: !Equals [ !Ref RunTestStep, "Yes" ]
  KMSStackSpecified: !Not [ !Equals [ "", !Ref KMSStack ] ]
  S3StackSpecified: !Not [ !Equals [ "", !Ref S3Stack ] ]

Resources:

  EmrManagedMasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    # DeletionPolicy: Retain
    Properties:
      GroupName: !Sub "${AWS::StackName}-EmrManagedMasterSecurityGroup"
      GroupDescription: "Security Group for EMR Master Node"
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}-VPCID"
      # SecurityGroupIngress:
      #   -
      #     IpProtocol: tcp
      #     FromPort: '8443'
      #     ToPort: '8443'
      #     SourceSecurityGroupId: !Ref ServiceAccessSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EmrManagedMasterSecurityGroup"
        - Key: Type
          Value: "ElasticMapReduce-Master-Private"

  # EmrMasterNodeSGSSHAccess:
  #   Type: AWS::EC2::SecurityGroup
  #   DeletionPolicy: Retain
  #   Properties:
  #     GroupName: !Sub "${AWS::StackName}-EmrMasterNodeSGSSHAccess"
  #     GroupDescription: "Security Group to allow SSH into Master node from bastion host"
  #     VpcId:
  #       Fn::ImportValue: !Sub "${NetworkStack}-VPCID"
  #     # SecurityGroupIngress:
  #     #   -
  #     #     IpProtocol: tcp
  #     #     FromPort: '22'
  #     #     ToPort: '22'
  #     #     SourceSecurityGroupId:
  #     #       Fn::ImportValue:
  #     #         !Sub "${NetworkStack}-DefaultSecurityGroup"
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${AWS::StackName}-EmrMasterNodeSGSSHAccess"

  EmrManagedSlaveSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    # DeletionPolicy: Retain
    Properties:
      GroupName: !Sub "${AWS::StackName}-EmrManagedSlaveSecurityGroup"
      GroupDescription: "Security Group for EMR Slave Node"
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}-VPCID"
      # SecurityGroupIngress:
      #   -
      #     IpProtocol: tcp
      #     FromPort: '8443'
      #     ToPort: '8443'
      #     SourceSecurityGroupId: !Ref ServiceAccessSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EmrManagedSlaveSecurityGroup"

  ServiceAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    # DeletionPolicy: Retain
    Properties:
      GroupName: !Sub "${AWS::StackName}-ServiceAccessSecurityGroup"
      GroupDescription: "Security Group for EMR Service Access"
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStack}-VPCID"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ServiceAccessSecurityGroup"

  # EmrServiceRoleEgressMaster:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     GroupId: !Ref ServiceAccessSecurityGroup
  #     IpProtocol: tcp
  #     FromPort: '8443'
  #     ToPort: '8443'
  #     SourceSecurityGroupId: !Ref EmrManagedMasterSecurityGroup

  # EmrServiceAccessSGEgressSlave:
  #   Type: AWS::EC2::SecurityGroupEgress
  #   Properties:
  #     GroupId: !Ref ServiceAccessSecurityGroup
  #     IpProtocol: tcp
  #     FromPort: '8443'
  #     ToPort: '8443'
  #     SourceSecurityGroupId: !Ref EmrManagedSlaveSecurityGroup

  EMRRoleForEc2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role"
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        - Fn::ImportValue: !Sub "${S3Stack}-S3UsePolicy"
        - Fn::ImportValue: !Sub "${KMSStack}-KMSKeyUsePolicy"
      # Policies:
      #   -
      #     PolicyName: "S3Policy"
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: "Allow"
      #           Action:
      #             - "s3:AbortMultipartUpload"
      #             - "s3:GetBucketLocation"
      #             - "s3:GetObject"
      #             - "s3:ListBucket"
      #             - "s3:ListBucketMultipartUploads"
      #             - "s3:PutObject"
      #             - "s3:DeleteObject"
      #           Resource:
      #             - Fn::ImportValue: !Sub "${S3Stack}-S3BucketArn"
      #             - !Join
      #                 - "/"
      #                 -
      #                   - Fn::ImportValue: !Sub "${S3Stack}-S3BucketArn"
      #                   - "*"
      #   -
      #     PolicyName: "KMSKeyPolicy"
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: "Allow"
      #           Action:
      #             - "kms:Decrypt"
      #             - "kms:Encrypt"
      #             - "kms:GenerateDataKey"
      #           Resource:
      #             - Fn::ImportValue: !Sub "${KMSStack}-KMSKey"
      RoleName: !Join [ "-", [ "EMR-EC2", !Ref "AWS::Region", !Ref ClusterName ] ]
      Description: !Join [ "-", [ "EMR-EC2", !Ref "AWS::Region", !Ref ClusterName, "Role" ] ]
      Tags:
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  EmrEc2RoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EMRRoleForEc2
      InstanceProfileName: !Ref EMRRoleForEc2

  EMRServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "elasticmapreduce.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      # Policies:
      #   -
      #     PolicyName: "S3Policy"
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: "Allow"
      #           Action:
      #             - "s3:AbortMultipartUpload"
      #             - "s3:GetBucketLocation"
      #             - "s3:GetObject"
      #             - "s3:ListBucket"
      #             - "s3:ListBucketMultipartUploads"
      #             - "s3:PutObject"
      #             - "s3:DeleteObject"
      #           Resource:
      #             - Fn::ImportValue: !Sub "${S3Stack}-S3BucketArn"
      #             - !Join
      #                 - "/"
      #                 -
      #                   - Fn::ImportValue: !Sub "${S3Stack}-S3BucketArn"
      #                   - "*"
      #   -
      #     PolicyName: "KMSKeyPolicy"
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: "Allow"
      #           Action:
      #             - "kms:Decrypt"
      #             - "kms:Encrypt"
      #             - "kms:GenerateDataKey"
      #           Resource:
      #             - Fn::ImportValue: !Sub "${KMSStack}-KMSKey"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole"
        - "arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceEditorsRole"
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
        - Fn::ImportValue: !Sub "${S3Stack}-S3UsePolicy"
        - Fn::ImportValue: !Sub "${KMSStack}-KMSKeyUsePolicy"
        # - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforAutoScalingRole
        # - arn:aws:iam::aws:policy/aws-service-role/AmazonEMRCleanupPolicy
        # - arn:aws:iam::aws:policy/AmazonElasticMapReduceReadOnlyAccess
      RoleName: !Join [ "-", [ "EMR-Service", !Ref "AWS::Region", !Ref ClusterName ] ]
      Description: !Join [ "-", [ "EMR-Service", !Ref "AWS::Region", !Ref ClusterName, "Role" ] ]
      Tags:
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  EMRSecurityConfiguration:
    Type: AWS::EMR::SecurityConfiguration
    Condition: KMSStackSpecified
    Properties:
      Name: !Sub "${ClusterName}-SecurityConfiguration"
      SecurityConfiguration:
        {
          "EncryptionConfiguration": {
              "AtRestEncryptionConfiguration": {
                  "S3EncryptionConfiguration": {
                      "EncryptionMode": "SSE-KMS",
                      "AwsKmsKey":
                        {"Fn::ImportValue" : {"Fn::Sub" : "${KMSStack}-KMSKey"}}
                  },
                  "LocalDiskEncryptionConfiguration": {
                      "EncryptionKeyProviderType": "AwsKms",
                      "AwsKmsKey": {"Fn::ImportValue" : {"Fn::Sub" : "${KMSStack}-KMSKey"}},
                      "EnableEbsEncryption": true
                  }
              },
              "EnableInTransitEncryption": false,
              "EnableAtRestEncryption": true
          }
        }

  EMRCluster:
    Type: AWS::EMR::Cluster
    Properties:
      # AdditionalInfo:
      Applications:
        - Name: "Hadoop"
        - Name: "Spark"
        - Name: "Hive"
        - Name: "Hue"
        - Name: !Select [ 0, !Ref Applications ]
        - Name: !Select [ 1, !Ref Applications ]
      # AutoScalingRole: EMR_AutoScaling_DefaultRole
      # BootstrapActions:
      Configurations:
        -
          Classification: "hive-site"
          ConfigurationProperties:
            "hive.metastore.client.factory.class" : "com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
        -
          Classification: "presto-connector-hive"
          ConfigurationProperties:
            "hive.metastore.glue.datacatalog.enabled" : "true"
        -
          Classification: "spark-hive-site"
          ConfigurationProperties:
            "hive.metastore.client.factory.class" : "com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"
        -
          Classification: "core-site"
          ConfigurationProperties:
            "hadoop.proxyuser.livy.groups" : "*"
            "hadoop.proxyuser.livy.hosts" : "*"
        -
          Classification: "livy-conf"
          ConfigurationProperties:
            "livy.impersonation.enabled" : "true"
      # CustomAmiId:
      # EbsRootVolumeSize:
      Instances:
        AdditionalMasterSecurityGroups:
          - Fn::ImportValue: !Sub "${NetworkStack}-DefaultSecurityGroup"
          -
            !If
              - PublicCluster
              - Fn::ImportValue: !Sub "${NetworkStack}-BastionSecurityGroup"
              - !Ref "AWS::NoValue"
        # AdditionalSlaveSecurityGroups:
        CoreInstanceFleet:
          !If
            - UseSpotInstance
            -
              Name: "Core Nodes Instance Fleet - Spot"
              TargetSpotCapacity: !Ref CoreNodes
              InstanceTypeConfigs:
                -
                  InstanceType: !Ref InstanceType
                  BidPriceAsPercentageOfOnDemandPrice: !Ref BidPriceAsPercentageOfOnDemandPrice
            -
              Name: "Core Nodes Instance Fleet - OnDemand"
              TargetOnDemandCapacity: !Ref CoreNodes
              InstanceTypeConfigs:
                -
                  InstanceType: !Ref InstanceType
        # CoreInstanceGroup:
        Ec2KeyName: !Ref KeyPair
        Ec2SubnetIds:
          !If
            - PublicCluster
            -
              - Fn::ImportValue: !Sub "${NetworkStack}-PublicSubnet1Id"
              - Fn::ImportValue: !Sub "${NetworkStack}-PublicSubnet2Id"
            -
              - Fn::ImportValue: !Sub "${NetworkStack}-PrivateSubnet1Id"
              - Fn::ImportValue: !Sub "${NetworkStack}-PrivateSubnet2Id"
        EmrManagedMasterSecurityGroup: !Ref EmrManagedMasterSecurityGroup
        EmrManagedSlaveSecurityGroup: !Ref EmrManagedSlaveSecurityGroup
        # HadoopVersion:
        # KeepJobFlowAliveWhenNoSteps:
        MasterInstanceFleet:
          Name: "Master Nodes Instance Fleet"
          TargetOnDemandCapacity: 1
          InstanceTypeConfigs:
            -
              InstanceType: !Ref InstanceType
              # BidPriceAsPercentageOfOnDemandPrice: !Ref BidPriceAsPercentageOfOnDemandPrice
        # MasterInstanceGroup:
        # Placement:
        ServiceAccessSecurityGroup:
          !If
            - PublicCluster
            - !Ref "AWS::NoValue"
            - !Ref ServiceAccessSecurityGroup
        # TerminationProtected:
      JobFlowRole: !Ref EmrEc2RoleInstanceProfile
      # KerberosAttributes:
      LogUri:
        !If
          - S3StackSpecified
          -
            !Join
              - ""
              -
                - "s3://"
                - Fn::ImportValue: !Sub "${S3Stack}-S3BucketName"
                - "/Logs/EMR/"
          - !Ref "AWS::NoValue"
      Name: !Ref ClusterName
      ReleaseLabel: !Ref ReleaseLabel
      # ScaleDownBehavior:
      # SecurityConfiguration: !Ref EMRSecurityConfiguration
      ServiceRole: !Ref EMRServiceRole
      # Steps:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-EMRCluster"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  TaskInstanceFleet:
    Type: AWS::EMR::InstanceFleetConfig
    Condition: CreateTaskNodes
    Properties:
      Name: "Task Instances - Spot"
      ClusterId: !Ref EMRCluster
      InstanceFleetType: "TASK"
      TargetSpotCapacity: !Ref TaskNodes
      InstanceTypeConfigs:
        -
          InstanceType: !Ref InstanceType
          BidPriceAsPercentageOfOnDemandPrice: !Ref BidPriceAsPercentageOfOnDemandPrice

  SparkTestStep:
    Type: AWS::EMR::Step
    Condition: RunTestStep
    Properties:
      ActionOnFailure: "CONTINUE"
      HadoopJarStep:
        Args:
          - "spark-submit"
          - "--deploy-mode"
          - "cluster"
          - "--class"
          - "org.apache.spark.examples.SparkPi"
          - "/usr/lib/spark/examples/jars/spark-examples.jar"
          - "10"
        Jar: "command-runner.jar"
        MainClass: ""
      JobFlowId: !Ref EMRCluster
      Name: "SparkTestStep"

Outputs:
  MasterNodeDNS:
    Description: "IP address of EMR cluster MasterNode"
    Value: !GetAtt EMRCluster.MasterPublicDNS
    Export:
      Name: !Sub "${AWS::StackName}-MasterPublicDNS"
  ClusterId:
    Description: "Cluster ID"
    Value: !Ref EMRCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterId"
  EmrManagedMasterSecurityGroup:
    Description: "Security Group of EMR Master Node"
    Value: !Ref EmrManagedMasterSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-EmrManagedMasterSecurityGroup"
  EmrManagedSlaveSecurityGroup:
    Description: "Security Group of EMR Master Node"
    Value: !Ref EmrManagedSlaveSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-EmrManagedSlaveSecurityGroup"
  EMRServiceRole:
    Description: "EMR Service Role"
    Value: !GetAtt EMRServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EMRServiceRole"
  EmrEc2RoleInstanceProfile:
    Description: "EMR EC2 Instance Profile"
    Value: !GetAtt EmrEc2RoleInstanceProfile.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EmrEc2RoleInstanceProfile"
