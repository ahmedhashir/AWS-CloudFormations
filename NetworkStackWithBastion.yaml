AWSTemplateFormatVersion: "2010-09-09"
Description: >
              This CloudFormation template will create a VPC with a public subnet and a private subnet.
              The private subnet will be associated with a NAT Gateway. Both Public & Private subnets will be
              connected to S3Endpoint. A linux Bastion Host will be available in public subnet.
Mappings:
  AMIRegionMap:
    ap-northeast-1:
      BastionAMI: ami-25bd2743
    ap-northeast-2:
      BastionAMI: ami-7248e81c
    ap-south-1:
      BastionAMI: ami-5d99ce32
    ap-southeast-1:
      BastionAMI: ami-d2fa88ae
    ap-southeast-2:
      BastionAMI: ami-b6bb47d4
    eu-west-1:
      BastionAMI: ami-6e28b517
    eu-west-2:
      BastionAMI: ami-ee6a718a
    eu-west-3:
      BastionAMI: ami-bfff49c2
    sa-east-1:
      BastionAMI: ami-f9adef95
    us-east-1:
      BastionAMI: ami-4bf3d731
      WindowsAMI: ami-0aeaed2faa756912c
    us-east-2:
      BastionAMI: ami-e1496384
      WindowsAMI: ami-0eb1e0a0c9f3f85c7
    us-west-1:
      BastionAMI: ami-65e0e305
      WindowsAMI: ami-07afec9a0db8421d4
    us-west-2:
      BastionAMI: ami-a042f4d8
      WindowsAMI: ami-02c9e7bab46cdc0f3
    ca-central-1:
      BastionAMI: ami-dcad28b8
      WindowsAMI: ami-03d55ac7b0bf2641a
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: VPC CIDR Block
        Parameters:
          - VPCCidrBlock
      -
        Label: 
          default: Availability Zones
        Parameters:
          - PublicAvailbilityZone
          - PublicCidrBlock
          - PrivateAvailbilityZone
          - PrivateCidrBlock
      -
        Label:
          default: Bastion Host
        Parameters:
          - BastionKeyPair
          - BastionSourceIp
    ParameterLabels:
      VPCCidrBlock:
        default: CIDR block
      PublicAvailbilityZone:
        default: Public Availability Zone
      PrivateAvailbilityZone:
        default: Private Availability Zone
      BastionKeyPair:
        default: Bastion Host Key Pair
      BastionSourceIp:
        default: "IP address authorized to access Bastion Hosts"
Parameters:
  VPCCidrBlock:
    Description: CIDR range for VPC
    Type: String
    Default: 10.0.0.0/16
  PublicAvailbilityZone:
    Description: "Availbility Zone for Public Subnet"
    Type: AWS::EC2::AvailabilityZone::Name
  PublicCidrBlock:
    Description: CIDR block for public Subnet
    Type: String
    Default: 10.0.1.0/24
  PrivateAvailbilityZone:
    Description: "Availbility Zone for Private Subnet"
    Type: AWS::EC2::AvailabilityZone::Name
  PrivateCidrBlock:
    Description: CIDR block for private Subnet
    Type: String
    Default: 10.0.2.0/24
  BastionKeyPair:
    Description: "Key Pair for Bastion Host"
    Type: AWS::EC2::KeyPair::KeyName
  BastionSourceIp:
    Description: "www.whatismyip.com"
    Type: String
    Default: "0.0.0.0/0"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PublicAvailbilityZone 
      CidrBlock: !Ref PublicCidrBlock
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet"
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref PrivateAvailbilityZone 
      CidrBlock: !Ref PrivateCidrBlock
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-InternetGateway"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateRouteTable"
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation 
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  PublicRouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: PublicRouteToInternet
    Properties:
      AllocationId: !GetAtt PublicIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NatGateway"
  RouteToNATGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  S3EndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable
      ServiceName:
        !Join [ "", [ "com.amazonaws.", !Ref "AWS::Region", ".s3" ] ]
      VpcId: !Ref VPC
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Description: "Security Group for Bastion Host only!"
    Properties:
      GroupName: !Sub "${AWS::StackName}-BastionSecurityGroup"
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-BastionSecurityGroup"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref BastionSourceIp
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: !Ref BastionSourceIp
  LinuxBastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: 
        Fn::FindInMap:
        - AMIRegionMap
        - !Ref AWS::Region
        - BastionAMI
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: 
        - !GetAtt BastionSecurityGroup.GroupId
      KeyName: !Ref BastionKeyPair
      BlockDeviceMappings: 
           - DeviceName: "/dev/sda1"
             Ebs: 
               VolumeSize: "8"
               VolumeType: "gp2"
               DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LinuxBastionHost"
  WindowsBastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.large
      ImageId:
        Fn::FindInMap:
        - AMIRegionMap
        - !Ref AWS::Region
        - WindowsAMI
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !GetAtt BastionSecurityGroup.GroupId
      KeyName: !Ref BastionKeyPair
      BlockDeviceMappings:
           - DeviceName: "/dev/sda1"
             Ebs:
               VolumeSize: "30"
               VolumeType: "gp2"
               DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WindowsBastionHost"
Outputs:
  VPCId:
    Description: "VPC Id"
    Value: !Ref VPC
    Export: 
      Name: !Sub "${AWS::StackName}-VPCID"
  PublicSubnetId:
    Description: "Public Subnet Id"
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetId"
  PublicRouteTableId:
    Description: "Public Route Table Id"
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTableId"
  PrivateSubnetId:
    Description: "Private Subnet Id"
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetId"
  PrivateRouteTableId:
    Description: "Private Route Table Id"
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateRouteTableId"
  BastionSecurityGroup:
    Description: "Security Group associated with Bastion Host"
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-BastionSecurityGroup"
  LinuxBastionHost:
    Description: "Bastion Host Public IP"
    Value: !GetAtt LinuxBastionHost.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-LinuxBastionHostIp"
  WindowsBastionHost:
    Description: "Windows Bastion Host Public IP"
    Value: !GetAtt WindowsBastionHost.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-WindowsBastionHostIp"