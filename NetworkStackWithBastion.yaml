AWSTemplateFormatVersion: "2010-09-09"
Description: >
              This CloudFormation template will create a VPC with a public subnet and a private subnet.
              The private subnet will be associated with a NAT Gateway. Both Public & Private subnets will be
              connected to S3Endpoint. A linux and/or Bastion Host will be available in public subnet.

Mappings:
  AMIRegionMap:
    us-east-1:
      BastionAMI: ami-4bf3d731
      WindowsAMI: ami-0b8d82dea356226d3
    us-east-2:
      BastionAMI: ami-e1496384
      WindowsAMI: ami-01dfc26117e53f3e7
    us-west-1:
      BastionAMI: ami-65e0e305
      WindowsAMI: ami-0bf300225a13613b3
    us-west-2:
      BastionAMI: ami-a042f4d8
      WindowsAMI: ami-01480a97ad9c3c6fb
    ca-central-1:
      BastionAMI: ami-dcad28b8
      WindowsAMI: ami-031f4c4f850851c90

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: VPC CIDR Block
        Parameters:
          - VPCCidrBlock
      -
        Label:
          default: Public Subnet
        Parameters:
          - PublicSubnet1CidrBlock
          - PublicSubnet2CidrBlock
      -
        Label:
          default: Private Subnet
        Parameters:
          - PrivateSubnet1CidrBlock
          - PrivateSubnet2CidrBlock
      -
        Label:
          default: Bastion Host
        Parameters:
          - BastionType
          - BastionKeyPair
          - BastionSourceIp
      -
        Label:
          default: Encryption
        Parameters:
          - KMSStackName
    ParameterLabels:
      VPCCidrBlock:
        default: CIDR block
      BastionKeyPair:
        default: Bastion Host Key Pair

Parameters:

  VPCCidrBlock:
    Description: CIDR range for VPC
    Type: String
    Default: "10.0.0.0/16"

  PublicSubnet1CidrBlock:
    Description: CIDR block for public Subnet 1
    Type: String
    Default: "10.0.1.0/24"

  PublicSubnet2CidrBlock:
    Description: CIDR block for public Subnet 2
    Type: String
    Default: "10.0.2.0/24"

  PrivateSubnet1CidrBlock:
    Description: CIDR block for private Subnet 1
    Type: String
    Default: "10.0.3.0/24"

  PrivateSubnet2CidrBlock:
    Description: CIDR block for private Subnet 2
    Type: String
    Default: "10.0.4.0/24"

  BastionKeyPair:
    Description: "Key Pair for Bastion Host"
    Type: AWS::EC2::KeyPair::KeyName

  BastionSourceIp:
    Description: "checkip.amazonaws.com"
    Type: String
    Default: "0.0.0.0/0"

  BastionType:
    Description: "Type of Bastion Host"
    Type: String
    Default: "Both"
    AllowedValues:
      - "Linux"
      - "Windows"
      - "Both"
      - "None"

  KMSStackName:
    Description: Name of KMS Stack that created a KMS Key
    Type: String
    Default: HashKMSStack

Conditions:

  KMSStackNameSpecified: !Not [ !Equals [ "" , !Ref KMSStackName ] ]
  LinuxBastion: !Or [ !Equals [ "Linux" , !Ref BastionType ], !Equals [ "Both" , !Ref BastionType ] ]
  WindowsBastion: !Or [ !Equals [ "Windows" , !Ref BastionType ], !Equals [ "Both" , !Ref BastionType ] ]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Ref PublicSubnet1CidrBlock
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Ref PublicSubnet2CidrBlock
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-InternetGateway"
          - Key: Owner
            Value: "hashir.ahmed@slalom.com"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet1RouteTable"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrivateSubnet2RouteTable"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnet1RouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnet2RouteTable

  PublicRouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1PublicIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  Subnet2PublicIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicSubnet1NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: PublicRouteToInternet
    Properties:
      AllocationId: !GetAtt Subnet1PublicIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet1NATGateway"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  PrivateSubnet1RouteToNATGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet1NATGateway

  PublicSubnet2NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: PublicRouteToInternet
    Properties:
      AllocationId: !GetAtt Subnet2PublicIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicSubnet2NATGateway"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  PrivateSubnetsRouteToNATGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicSubnet2NATGateway

  S3EndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateSubnet1RouteTable
        - !Ref PrivateSubnet2RouteTable
      ServiceName:
        !Join [ "", [ "com.amazonaws.", !Ref "AWS::Region", ".s3" ] ]
      VpcId: !Ref VPC

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-BastionSecurityGroup"
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-BastionSecurityGroup"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref BastionSourceIp
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref BastionSourceIp

  BastionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "BastionIAMRole-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "S3PermissionForSSMAgent"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource:
                  - !Sub "arn:aws:s3:::aws-ssm-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::amazon-ssm-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*"
                  - !Sub "arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*"
                  - !Sub "arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-BastionIAMRole"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  BastionIAMRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionIAMRole
      InstanceProfileName: !Ref BastionIAMRole

  LinuxBastionHost:
    Condition: LinuxBastion
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      ImageId:
        Fn::FindInMap:
        - AMIRegionMap
        - !Ref AWS::Region
        - BastionAMI
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !GetAtt BastionSecurityGroup.GroupId
        - !GetAtt VPC.DefaultSecurityGroup
      KeyName: !Ref BastionKeyPair
      IamInstanceProfile: !Ref BastionIAMRoleInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 8
            VolumeType: "gp2"
            Encrypted: True
            KmsKeyId:
              !If
                - KMSStackNameSpecified
                -
                  Fn::ImportValue: !Sub "${KMSStackName}-KeyAlias"
                - !Ref "AWS::NoValue"
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            # Install the SSM agent.
            cd /tmp
            curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm
            sudo yum install -y amazon-ssm-agent.rpm
            pip3 install --upgrade --user awscli
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LinuxBastionHost"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

  WindowsBastionHost:
    Condition: WindowsBastion
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      ImageId:
        Fn::FindInMap:
        - AMIRegionMap
        - !Ref AWS::Region
        - WindowsAMI
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !GetAtt BastionSecurityGroup.GroupId
        - !GetAtt VPC.DefaultSecurityGroup
      KeyName: !Ref BastionKeyPair
      IamInstanceProfile: !Ref BastionIAMRoleInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 30
            VolumeType: "gp2"
            Encrypted: True
            KmsKeyId:
              !If
                - KMSStackNameSpecified
                -
                  Fn::ImportValue: !Sub "${KMSStackName}-KeyAlias"
                - !Ref "AWS::NoValue"
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-WindowsBastionHost"
        - Key: Owner
          Value: "hashir.ahmed@slalom.com"

Outputs:
  VPCId:
    Description: "VPC Id"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PublicSubnet1Id:
    Description: "Public Subnet 1 Id"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1Id"
  PublicSubnet2Id:
    Description: "Public Subnet 2 Id"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2Id"
  PublicRouteTableId:
    Description: "Public Route Table Id"
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PublicRouteTableId"
  PrivateSubnet1Id:
    Description: "Private Subnet 1 Id"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1Id"
  PrivateSubnet2Id:
    Description: "Private Subnet 2 Id"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2Id"
  PrivateSubnet1RouteTableId:
    Description: "Private Route Table Id"
    Value: !Ref PrivateSubnet1RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1RouteTableId"
  PrivateSubnet2RouteTableId:
    Description: "Private Route Table Id"
    Value: !Ref PrivateSubnet2RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2RouteTableId"
  BastionSecurityGroup:
    Description: "Security Group associated with Bastion Host"
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-BastionSecurityGroup"
  LinuxBastionHost:
    Condition: LinuxBastion
    Description: "Bastion Host Public IP"
    Value: !GetAtt LinuxBastionHost.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-LinuxBastionHostIp"
  WindowsBastionHost:
    Condition: WindowsBastion
    Description: "Windows Bastion Host Public IP"
    Value: !GetAtt WindowsBastionHost.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-WindowsBastionHostIp"
  BastionSourceIP:
    Description: "Bastion Source IP"
    Value: !Ref BastionSourceIp
    Export:
      Name: !Sub "${AWS::StackName}-BastionSourceIp"
  VPCDefaultSecurityGroup:
    Description: "VPC DefaultSecurityGroup"
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-DefaultSecurityGroup"
